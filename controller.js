// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(["Ural/Modules/pubSub", "Ural/Modules/dataProvider"], function(pubSub, dataProvider) {
    var Controller;
    return Controller = (function() {

      function Controller(viewModel) {
        var _this = this;
        this.viewModel = viewModel;
        ko.applyBindings(viewModel, $("#body")[0]);
        pubSub.sub("crud", "start_create", function(item) {
          return _this.crudStartCreate(item);
        });
        pubSub.sub("crud", "start_update", function(item) {
          return _this.crudStartUpdate(item);
        });
        pubSub.sub("crud", "start_delete", function(item) {
          return _this.crudStartDelete(item);
        });
        pubSub.sub("crud", "get", function(opts) {
          return _this.crudGet(opts);
        });
        pubSub.sub("crud", "create", function(item) {
          return _this.crudCreate(item);
        });
        pubSub.sub("crud", "update", function(item) {
          return _this.crudUpdate(item);
        });
        pubSub.sub("crud", "delete", function(item) {
          return _this.crudDelete(item);
        });
        pubSub.sub("crud", "details", function(item) {
          return _this.crudDetails(item);
        });
        pubSub.sub("crud", "cancel", function(opts) {
          return _this.crudCancel(opts);
        });
        pubSub.sub("crud", "action", function(opts) {
          return _this.crudAction(opts);
        });
      }

      Controller.prototype.crudAction = function(opts) {
        var _this = this;
        return dataProvider.action(opts.resource, opts.name, opts.data, function(err, data) {
          _this.crudDone(null, err, "Выполнено успешно");
          if (!err && opts.success) {
            return opts.success(data);
          }
        });
      };

      Controller.prototype.crudDetails = function(item) {
        return window.location = dataProvider.getUrl(item.resource, "details", item.toData());
      };

      Controller.prototype.crudGet = function(opts) {
        var _this = this;
        return dataProvider.get(opts.resource, opts.filter, function(err, data) {
          var prop, vm, _ref;
          vm = null;
          if (opts.resource === _this.viewModel.resource) {
            vm = _this.viewModel;
          } else {
            _ref = _this.viewModel;
            for (prop in _ref) {
              if (!__hasProp.call(_ref, prop)) continue;
              if (_this.viewModel[prop] && _this.viewModel[prop].list && _this.viewModel[prop].resource === opts.resource) {
                vm = _this.viewModel[prop];
                break;
              }
            }
          }
          if (vm) {
            return vm.map(data);
          }
        });
      };

      Controller.prototype.crudStartDelete = function(item) {
        return this.showForm(item.resource, "delete", item);
      };

      Controller.prototype.crudStartCreate = function(item) {
        var _this = this;
        if (item.useGetNewRemote) {
          return dataProvider.getNew(item.resource, (item.parentItem ? item.parentItem.toData() : null), function(err, data) {
            if (err) {
              return _this.crudDone(err);
            } else {
              item.map(data);
              item.errors.showAllMessages(false);
              return _this.showForm(item.resource, "create", item);
            }
          });
        } else {
          return this.showForm(item.resource, "create", item);
        }
      };

      Controller.prototype.crudStartUpdate = function(item) {
        return this.showForm(item.resource, "update", item);
      };

      Controller.prototype.crudCancel = function(opts) {
        return this.hideForm(opts.resource, opts.status);
      };

      Controller.prototype.crudCreate = function(item) {
        var _this = this;
        if (item.isValid()) {
          return dataProvider.create(item.resource, item.toData(true), function(err, data) {
            _this.crudDone(item, err, "Создано успешно");
            if (!err) {
              if (!item.useRepeatCreate || !item.useRepeatCreate()) {
                _this.hideForm(item.resource, "create");
                item.completeCreate(data);
              } else {
                item.map(data);
              }
              return pubSub.pub("crud", "complete_create", item.clone());
            }
          });
        } else {
          return this.crudDone(item, {
            message: "Неправильные данные"
          });
        }
      };

      Controller.prototype.crudUpdate = function(item) {
        var _this = this;
        if (item.isValid()) {
          return dataProvider.update(item.resource, item.toData(true), function(err, data) {
            _this.crudDone(item, err, "Сохранение успешно");
            if (!err) {
              _this.hideForm(item.resource, "update");
              return item.completeUpdate(data);
            }
          });
        } else {
          return this.crudDone(item, {
            message: "Неправильные данные"
          });
        }
      };

      Controller.prototype.crudDelete = function(item) {
        var _this = this;
        return dataProvider["delete"](item.resource, item.toData(true), function(err) {
          _this.crudDone(item, err, "Удалено успешно");
          if (!err) {
            _this.hideForm(item.resource, "update");
            return pubSub.pub("crud", "complete_delete", item);
          }
        });
      };

      Controller.prototype.crudDone = function(item, err, succ) {
        if (err) {
          toastr.error(err.message);
          if (item) {
            if (err.errors) {
              item.setErrors(err.errors);
            }
            return item.errors.showAllMessages();
          }
        } else {
          return toastr.success(succ);
        }
      };

      Controller.prototype.showForm = function(resource, formType, item) {
        var form;
        form = $("[data-form-type='" + formType + "'][data-form-resource='" + resource + "']");
        if (!form[0]) {
          throw "Required form not implemented";
        }
        ko.applyBindings(item, form[0]);
        return form.modal("show").on("hidden", function() {
          return ko.cleanNode(form[0]);
        });
      };

      Controller.prototype.hideForm = function(resource, formType) {
        var form;
        form = $("[data-form-type='" + formType + "'][data-form-resource='" + resource + "']");
        return form.modal("hide");
      };

      return Controller;

    })();
  });

}).call(this);
