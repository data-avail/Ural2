// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(function() {
    var DataProvider;
    return DataProvider = (function() {

      function DataProvider() {}

      DataProvider.prototype.onFlatData = function(data) {
        var prop;
        for (prop in data) {
          if (!__hasProp.call(data, prop)) continue;
          if (!(data[prop] instanceof Date) && (typeof data[prop] === "object" || Array.isArray(data[prop]))) {
            delete data[prop];
          }
        }
        DataProvider.flatDate(data);
        return data;
      };

      DataProvider.flatDate = function(data) {
        var d, prop, _results;
        _results = [];
        for (prop in data) {
          if (!__hasProp.call(data, prop)) continue;
          if (data[prop] instanceof Date) {
            _results.push(data[prop] = data[prop].toUTCString());
          } else if (typeof data[prop] === "object") {
            _results.push(DataProvider.flatDate(data[prop]));
          } else if (Array.isArray(data[prop])) {
            _results.push((function() {
              var _i, _len, _ref, _results1;
              _ref = data[prop];
              _results1 = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                d = _ref[_i];
                _results1.push(DataProvider.flatDate(d));
              }
              return _results1;
            })());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      DataProvider.prototype._getActionUrl = function(resource, action) {
        return "/" + resource + "/" + action.charAt(0).toUpperCase() + action.slice(1);
      };

      DataProvider.prototype._handleResult = function(resp, res, done) {
        if (res === "error") {
          return done({
            code: resp.status,
            message: resp.statusText
          });
        } else if (resp.errors || resp.error) {
          return done({
            code: 500,
            message: (resp.error ? resp.error : "Ошибка выполнения"),
            errors: resp.errors
          });
        } else {
          return done(null, resp);
        }
      };

      DataProvider.prototype.getUrl = function(resource, action, data) {
        return this._getActionUrl(resource, action) + "/" + data.Id;
      };

      DataProvider.prototype.get = function(resource, filter, done) {
        var _this = this;
        return $.get(this._getActionUrl(resource, "index") + "Json", filter).always(function(resp, res) {
          return _this._handleResult(resp, res, done);
        });
      };

      DataProvider.prototype.getNew = function(resource, parentData, done) {
        return $.post(this._getActionUrl(resource, "getNew") + "Json", {
          Id: (parentData ? parentData.Id : null)
        }).always(function(resp, res) {
          if (res === "error") {
            return done({
              code: resp.status,
              message: resp.statusText
            });
          } else {
            return done(null, resp);
          }
        });
      };

      DataProvider.prototype.create = function(resource, data, done) {
        var _this = this;
        data = this.onFlatData(data);
        return $.post(this._getActionUrl(resource, "create") + "Json", data).always(function(resp, res) {
          return _this._handleResult(resp, res, done);
        });
      };

      DataProvider.prototype.update = function(resource, data, done) {
        var _this = this;
        data = this.onFlatData(data);
        return $.post(this._getActionUrl(resource, "edit") + "Json", data).always(function(resp, res) {
          return _this._handleResult(resp, res, done);
        });
      };

      DataProvider.prototype["delete"] = function(resource, data, done) {
        var _this = this;
        return $.post(this._getActionUrl(resource, "delete") + "Json", {
          Id: data.Id
        }).always(function(resp, res) {
          return _this._handleResult(resp, res, done);
        });
      };

      DataProvider.prototype.action = function(resource, act, data, done) {
        var _this = this;
        data = this.onFlatData(data);
        return $.post(this._getActionUrl(resource, act) + "Json", data).always(function(resp, res) {
          return _this._handleResult(resp, res, done);
        });
      };

      return DataProvider;

    })();
  });

}).call(this);
